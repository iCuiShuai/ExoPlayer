apply plugin: 'maven-publish'

/** example
 ext {
 publishDesc = 'AD lib for mx player.'
 publishGroupId = 'com.zenjoy.code'
 publishArtifactId = 'adlibrary'
 publishVersion = '1.1.1'
 publishVersionCode = 111
 publishSource = false
 publishFile = project.file('android-ad-sdk.aar')
 publisherUserName = 'userName'
 publisherPassword = 'userPassword'
 publishUrlSnapshot = 'http://10.7.0.7:8098/nexus/content/repositories/snapshots/'
 publishDependencies = [['com.zenjoy.code', 'aol-android-ad-sdk-wrapper', "${aolVersion}"]
 ,['com.zenjoy.code', 'aol-android-google-ad-mm-adapter-wrapper', "${aolVersion}"]]
 }

 */


task sourceJar(type: Jar) {
    try {
        from android.sourceSets.main.java.srcDirs
        classifier "sources"
    }catch (Exception e) {
        System.out.println(e.toString())
        e.printStackTrace()
        try {
            from sourceSets.main.allJava
            classifier "sources"
        }catch (Exception e1) {
            System.out.println(e1.toString())
            e1.printStackTrace()
            if (getNeedPublishSource()) {
                ext.publishSource = false
            }
        }
    }
}

def testSourceCode() {
    try {
        def i = android.sourceSets.main.java.srcDirs
    }catch (Exception e) {
        e.printStackTrace()
        try {
            def i = sourceSets.main.allJava
        }catch (Exception e1) {
            e1.printStackTrace()
            if (getNeedPublishSource()) {
                ext.publishSource = false
            }
        }
    }
}

static def isValidDependency(dependency) {
    return dependency.group != null && dependency.name != null && dependency.version != null
}

static def isUnspecifiedDependency(dependency) {
    return dependency.group != null && dependency.name != null && "unspecified".equals(dependency.version)
}

def isTrue(name) {
    return ext.has(name) && ext.get(name)
}

def stringNonNull(name) {
    return ext.has(name) && ext.get(name).length() > 0
}

def readProperties(name) {
    try {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty(name)
    }catch (Exception e) {

    }

    return null
}

def getNeedPublishSource() {
    if (!ext.has('publishSource')) {
        ext.set('publishSource', true)
        return true
    }

    return ext.get('publishSource')
}

def _getPublishArtifactId() {
    ext.has('publishArtifactId') ? ext.get('publishArtifactId') : project.name;
}

static def _getEnv(name) {
    return System.getenv(name)
}

def _getString(name) {
    def value = ext.has(name) ? ext.get(name) : readProperties(name)
    if (value == null) {
        value = _getEnv(name)
    }

    return value
}

def _getPublisherUserName() {
    def ret = _getString('publisherUserName')
    if (ret == null) {
        new NullPointerException("publisherUserName is null").printStackTrace()
    }
    return ret
}

def _getPublisherPassword() {
    def ret = _getString('publisherPassword')

    if (ret == null) {
        new NullPointerException("publisherPassword is null").printStackTrace()
    }
    return ret
}

def _getPublishUrlSnapshot() {
    return _getString('publishUrlSnapshot')
}

def _getPublishUrlRelease() {
    return _getString('publishUrlRelease')
}

def extraDependencies(dependencies) {
    if (ext.has('publishDependenciesFunc')) {
        ext.get('publishDependenciesFunc') dependencies
    }

    if (ext.has('publishDependencies')) {
        System.out.println("type: " + ext.get('publishDependencies'))
        def array = ext.get('publishDependencies')
        for (def i = 0; i < array.size(); i++) {
            def dependency = array[i]
            System.out.println("type: " + dependency)
            def dependencyNode = dependencies.appendNode('dependency')
            dependencyNode.appendNode('groupId', dependency[0])
            dependencyNode.appendNode('artifactId', dependency[1])
            dependencyNode.appendNode('version', dependency[2])
        }
    }
}

def isUnspecifiedIgnored() {
    ext.has('ignoreUnspecified') ? ext.get('ignoreUnspecified') : false
}

publishing {
    publications {
        mavenRelease(MavenPublication) {
            ext.repo = 'Release'

            groupId "${publishGroupId}"
            artifactId _getPublishArtifactId()
            version "${publishVersion}"

            testSourceCode()

            if (getNeedPublishSource())
                artifact(sourceJar)

            if (!stringNonNull('publishFile')) {
                try {
                    if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists())
                        artifact("${buildDir}/outputs/aar/${project.name}-release.aar")
                    else
                        from components.java
                }catch (Exception e) {
                    try {
                        from components.java
                    }catch (Exception e1) {

                    }
                }
            }
            else
                artifact("${publishFile}")

            pom.withXml {
                def node = asNode()
                addDependencies(node, false)
            }
        }

        mavenSnapshot(MavenPublication) {
            ext.repo = 'Snapshot'

            groupId "${publishGroupId}"
            artifactId _getPublishArtifactId()
            version "${publishVersion}-SNAPSHOT"

            testSourceCode()

            if (getNeedPublishSource())
                artifact(sourceJar)

            if (!stringNonNull('publishFile')) {
                try {
                    if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists())
                        artifact("${buildDir}/outputs/aar/${project.name}-release.aar")
                    else
                        from components.java
                }catch (Exception e) {
                    try {
                        from components.java
                    }catch (Exception e1) {

                    }
                }
            }
            else
                artifact("${publishFile}")

            pom.withXml {
                def node = asNode()
                addDependencies(node, true)
            }
        }
    }
    repositories {
        maven {
            name 'Snapshot'
            credentials {
                username _getPublisherUserName()
                password _getPublisherPassword()
            }

            url _getPublishUrlSnapshot()
        }

        maven {
            name 'Release'
            credentials {
                username _getPublisherUserName()
                password _getPublisherPassword()
            }

            url _getPublishUrlRelease()
        }
    }
}

private void addDependencies(node, isSnapshot) {
    if (stringNonNull('publishDesc')) {
        node.appendNode('description',
                "${publishDesc}")
    }else {
        node.appendNode('description',
                project.name)
    }
    def dependencies = node.appendNode('dependencies')

    def compile = true
    try {
        def dependencies1 = configurations.compile.allDependencies
    }catch (Exception e) {
        compile = false
    }
    if (compile) {
        configurations.compile.allDependencies.each { dependency ->
            if (isValidDependency(dependency)) {
                if (!(isUnspecifiedIgnored() && isUnspecifiedDependency(dependency))) {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dependency.name)
                    if (!isUnspecifiedDependency(dependency)) {
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('version', dependency.version)
                    } else {
                        dependencyNode.appendNode('groupId', "${publishGroupId}")
                        if (isSnapshot)
                            dependencyNode.appendNode('version', "${publishVersion}-SNAPSHOT")
                        else
                            dependencyNode.appendNode('version', "${publishVersion}")
                    }

                    //If there are any exclusions in dependency
                    if (dependency.excludeRules != null && dependency.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dependency.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }

    def imp = true
    try {
        def dependencies1 = configurations.implementation.allDependencies
    }catch (Exception e) {
        imp = false
    }
    if (imp) {
        configurations.implementation.allDependencies.each { dependency ->
            if (isValidDependency(dependency)) {
                if (!(isUnspecifiedIgnored() && isUnspecifiedDependency(dependency))) {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dependency.name)
                    if (!isUnspecifiedDependency(dependency)) {
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('version', dependency.version)
                    } else {
                        dependencyNode.appendNode('groupId', "${publishGroupId}")
                        if (isSnapshot)
                            dependencyNode.appendNode('version', "${publishVersion}-SNAPSHOT")
                        else
                            dependencyNode.appendNode('version', "${publishVersion}")
                    }

                    //If there are any exclusions in dependency
                    if (dependency.excludeRules != null && dependency.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dependency.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }

    def api = true
    try {
        def dependencies1 = configurations.api.allDependencies
    }catch (Exception e) {
        api = false
    }
    if (api) {
        configurations.api.allDependencies.each { dependency ->
            if (isValidDependency(dependency)) {
                if (!(isUnspecifiedIgnored() && isUnspecifiedDependency(dependency))) {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dependency.name)
                    if (!isUnspecifiedDependency(dependency)) {
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('version', dependency.version)
                    } else {
                        dependencyNode.appendNode('groupId', "${publishGroupId}")
                        if (isSnapshot)
                            dependencyNode.appendNode('version', "${publishVersion}-SNAPSHOT")
                        else
                            dependencyNode.appendNode('version', "${publishVersion}")
                    }

                    //If there are any exclusions in dependency
                    if (dependency.excludeRules != null && dependency.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dependency.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }

    extraDependencies(dependencies)
}